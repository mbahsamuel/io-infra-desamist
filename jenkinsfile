// pipeline {
//     agent any

//     environment {
//         AWS_DEFAULT_REGION = 'us-east-1' // Replace with your AWS region
//         STACK_NAME = 'desamist-tech' // Replace with your CloudFormation stack name
//         TEMPLATE_FILE = 'develop/template.yml' // Replace with the path to your CloudFormation template file
//         IAM_ROLE_ARN = 'arn:aws:iam::869227219142:role/cloudformation-role'
//         //PARAMETERS_FILE = 'path/to/your/parameters.json' // Replace with the path to your CloudFormation parameters file
//     }

//     stages {
//         stage('Checkout') {
//             steps {
//                 git 'https://github.com/mbahsamuel/io-infra-desamist.git' // Replace with the URL of your Git repository
//             }
//         }

        

//         stage('Deploy CloudFormation') {
//             steps {
//                 script {
//                     sh 'aws cloudformation deploy --template-file ${TEMPLATE_FILE} --stack-name ${STACK_NAME} --capabilities CAPABILITY_IAM --region ${AWS_DEFAULT_REGION} --role-arn ${IAM_ROLE_ARN}'
//                     // sh 'aws cloudformation delete-stack --stack-name ${STACK_NAME}  --region ${AWS_DEFAULT_REGION}'
//                 }
//             }
//         }
//     }
// }


pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'  // Specify the AWS region
        AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
        STACK_NAME = 'desamist-tech'  // Specify the CloudFormation stack name
        TEMPLATE_FILE = 'develop/template.yml'  // Specify the CloudFormation template file
      //  PARAMETER_FILE = 'parameters.json'  // Specify the CloudFormation parameter file
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/mbahsamuel/io-infra-desamist.git'
            }
        }
        stage('AWS STS Stage') {
            steps {
                script {
                    // Define the AWS region you want to work with
                    def awsRegion = 'us-east-1'

                    // The role ARN you want to assume in AWS
                    def roleArn = 'arn:aws:iam::869227219142:role/cloudformation-role'

                    // The session name for your assumed role (can be any unique name)
                    def sessionName = 'JenkinsAssumedRole'

                    // The name of the Jenkins credentials containing the AWS access key
                    def awsAccessKeyId = credentials('aws-access-key')

                    // The name of the Jenkins credentials containing the AWS secret key
                    def awsSecretAccessKey = credentials('aws-secret-key')

                    // Step 1: Get AWS temporary credentials using STS
                    def stsCredentials = withAWS(region: awsRegion, accessKeyId: awsAccessKeyId, secretAccessKey: awsSecretAccessKey) {
                        sh "aws sts assume-role --role-arn ${roleArn} --role-session-name ${sessionName} > sts.json"
                        return readJSON(file: 'sts.json')
                    }

                    // Extract temporary AWS credentials
                    def accessKeyId = stsCredentials.Credentials.AccessKeyId
                    def secretAccessKey = stsCredentials.Credentials.SecretAccessKey
                    def sessionToken = stsCredentials.Credentials.SessionToken

                    // Step 2: Use the assumed role credentials to perform AWS actions
                    withAWS(region: awsRegion, accessKeyId: accessKeyId, secretAccessKey: secretAccessKey, sessionToken: sessionToken) {
                        // Your AWS actions go here
                        sh "aws cloudformation deploy --template-file cft.yaml --stack-name DEMO --capabilities CAPABILITY_IAM --region us-east-1"
                        // sh 'aws cloudformation delete-stack --stack-name ${STACK_NAME}  --region ${AWS_DEFAULT_REGION}'
                    }
                }
            }
        }

    } 	 	
}